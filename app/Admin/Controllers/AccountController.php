<?php

namespace App\Admin\Controllers;

use App\Models\Account as AccountModel;
use App\Models\Administrator;
use App\Admin\Repositories\Account;
use App\Models\Organization;
use Dcat\Admin\Admin;
use Dcat\Admin\Form;
use Dcat\Admin\Grid;
use Dcat\Admin\Show;
use Dcat\Admin\Controllers\AdminController;
use Dcat\Admin\Tree;

class AccountController extends AdminController
{
    protected $showTreeQueryName = '_user_id';

    public function description()
    {
        if ($userId = request($this->showTreeQueryName)) {
            $admin = Administrator::find($userId, ['id', 'name']);

            $url = admin_url('auth/users/'.$admin->id);

            return ['index' => "<a href='$url'>{$admin->name}</a>的个人账户"];
        }

        return parent::description(); // TODO: Change the autogenerated stub
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        if ($userId = request($this->showTreeQueryName)) {
            return $this->tree($userId);
        }

        return Grid::make(new Account(), function (Grid $grid) {
            $grid->id->bold()->sortable();
            $grid->name;
            $grid->money;

            $queryName = $this->showTreeQueryName;
            $grid->user->get('name')->link(function () use ($queryName) {
                return "?{$queryName}={$this->user['id']}";
            }, '_self');
            $grid->organization->get('name')->link(function () {
                return admin_url('organizations/'.$this->organization['id']);
            });
            $grid->created_at;
            $grid->updated_at->sortable();

            $grid->model()->with(['user', 'organization']);

            $grid->quickSearch(['id', 'name']);
            $grid->tools('<a class="btn btn-sm btn-default" href="?_tree=1">排序</a>');

            $grid->quickCreate(function (Grid\Tools\QuickCreate $quickCreate) {
                $quickCreate->text('name')->required();
                $quickCreate->text('money')->type('number')->required();

                $quickCreate
                    ->select('organization_id')
                    ->options(
                        Organization::all()->pluck('name', 'id')
                    );
                $quickCreate
                    ->select('user_id')
                    ->default(Admin::user()->id)
                    ->options(
                        Administrator::all()->pluck('username', 'id')
                    );
                $quickCreate
                    ->select('parent_id')
                    ->options(
                        AccountModel::selectOptions()
                    );
            });
        
            $grid->filter(function (Grid\Filter $filter) {
                $filter->equal('id');
                $filter->like('name');
                $filter->equal('user_id')->selectResource('auth/users');
                $filter->equal('organization_id')->selectResource('organizations');

                $filter->scope('trashed')->onlyTrashed();
            });
        });
    }

    public function tree($userId)
    {
        return Tree::make(new Account(['organization']), function (Tree $tree) use ($userId) {
            $tree->query(function ($model) use ($userId) {
                return $model->where('user_id', $userId);
            });

            $tree->tools('<a class="btn btn-sm btn-default" href="?_tree=">表格</a>');

            $tree->branch(function ($branch) {
                $money = $branch['money'] / 1000;

                return <<<HTML
<span class="label label-primary">{$branch['organization']['name']}</span> <b>{$branch['name']}</b> 
    &nbsp;&nbsp;&nbsp;&nbsp; <label class="label label-default">$money(元)</label>
HTML;
            });
        });
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     *
     * @return Show
     */
    protected function detail($id)
    {
        return Show::make($id, new Account(), function (Show $show) {
            $show->id;
            $show->name;
            $show->money;
            $show->divider();
            $show->user_id;
            $show->organization_id;
            $show->parent_id;
            $show->order;
            $show->created_at;
            $show->updated_at;
        });
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        return Form::make(new Account(), function (Form $form) {
            $form->display('id');
            $form->text('name');
            $form->text('money');
            $form->text('user_id');
            $form->text('organization_id')->saving(function ($value) {
                return (int) $value;
            });
            $form->text('parent_id');
            $form->text('order');
        
            $form->display('created_at');
            $form->display('updated_at');
        });
    }
}
